name: Deploy to Amazon ECS CI CD

on:
  push:
    branches: [production]

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECS_CLUSTER: 
  ECR_REPOSITORY: test
  ECS_SERVICE: 
  CONTAINER_NAME: 
  TASK_DEFINITION: 

jobs:
  deploy:
    name: Deploying to Production
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Make environment files
        run: |
          cat << EOF > .env.stage.prod
            PORT=${{ secrets.PORT}}
            NODE_ENV=${{ secrets.NODE_ENV}}
            MONGO_URI=${{ secrets.MONGO_URI}}
            JWT_SECRET=${{ secrets.JWT_SECRET}}
            JWT_EXPIRY_TIME=${{ secrets.JWT_EXPIRY_TIME}}
            TWO_FACTOR_AUTHENTICATION_APP_NAME=${{ secrets.TWO_FACTOR_AUTHENTICATION_APP_NAME}}
            AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY}}
            AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY}}
            AWS_BUCKET=${{ secrets.AWS_BUCKET}}
            AWS_REGION=${{ secrets.AWS_REGION}}
            AWS_ACCESS_URL=${{ secrets.AWS_ACCESS_URL}}
            SEND_GRID_KEY=${{ secrets.SEND_GRID_KEY}}
            FROM_EMAIL=${{ secrets.FROM_EMAIL}}
            ADMIN_EMAIL=${{ secrets.ADMIN_EMAIL}}
            FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID}}
            FIREBASE_CLIENT_EMAIL=${{ secrets.FIREBASE_CLIENT_EMAIL}}
            FIREBASE_PRIVATE_KEY=${{ secrets.FIREBASE_PRIVATE_KEY}}
            PAYPAL_CLIENT_ID=${{ secrets.PAYPAL_CLIENT_ID}}
            PAYPAL_SECRET=${{ secrets.PAYPAL_SECRET}}
            RECAPTCHA_SECRET=${{ secrets.RECAPTCHA_SECRET}}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.ADMIN_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.ADMIN_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: 'true'

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: latest
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          #echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> "$GITHUB_OUTPUT"

      - name: Download task definition
        run: aws ecs describe-task-definition --task-definition ${{ env.TASK_DEFINITION }} --query taskDefinition > ${{ env.TASK_DEFINITION }}.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.TASK_DEFINITION }}.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
